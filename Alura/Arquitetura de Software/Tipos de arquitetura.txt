Tipos de arquitetura:

- Arquitetura hexagonal (hexagonal architecture): 
	Também conhecida como arquitetura ports and adapters, foi proposta por Alistair Cockburn em 2005. Na arquitetura hexagonal, o núcleo da aplicação, que contém a lógica de negócios, é isolado de qualquer detalhe de implementação, como interfaces com banco de dados, interfaces com usuário, serviços externos etc. Isso é alcançado através do conceito de "portas" (ports) e "adaptadores" (adapters):
		- Portas (ports): são as interfaces que definem os contratos entre o núcleo da aplicação e os componentes externos. Por exemplo, uma porta pode ser uma interface que define métodos para acessar os dados do banco de dados ou para lidar com solicitações HTTP.
		- Adaptadores (adapters): são as implementações concretas das portas. Eles conectam o núcleo da aplicação com os componentes externos, traduzindo as chamadas de métodos do núcleo para as APIs específicas desses componentes externos. Por exemplo, um adaptador pode implementar a interface de acesso ao banco de dados usando JDBC ou Hibernate.

	A arquitetura hexagonal promove a modularidade e a reutilização do código, pois cada componente pode ser substituído ou alterado sem afetar o resto do sistema, desde que mantenha o contrato definido pelas portas. Isso também facilita a testabilidade, pois permite a substituição de implementações reais por mocks ou stubs durante os testes unitários.
	Além disso, ela facilita a integração com sistemas externos, como APIs de terceiros, sistemas legados e serviços em nuvem, pois essas integrações são tratadas por adaptadores que podem ser facilmente substituídos ou reconfigurados.

- Arquitetura onion (onion architecture)
	Proposta por Jeffrey Palermo, a arquitetura onion (literalmente arquitetura de cebola, em inglês) é baseada no princípio de inversão de dependência. A ideia central por trás da onion architecture é organizar o código em camadas concêntricas, em que o núcleo da aplicação é representado pela camada mais interna e as camadas externas correspondem a detalhes de implementação, como a interface do usuário e o acesso a dados. Essas camadas são organizadas hierarquicamente, com a camada mais interna não conhecendo as camadas externas, mas as camadas externas conhecendo e dependendo das camadas internas.

	As camadas típicas em uma arquitetura de cebola incluem:
		- Domínio (core domain): é a camada mais interna e contém a lógica de negócios central da aplicação. Ela é independente de qualquer detalhe de implementação e geralmente consiste em entidades, serviços e objetos de valor que representam conceitos do domínio do problema.
		- Camada de aplicação (application layer): esta camada orquestra o fluxo de controle da aplicação e coordena as interações entre a camada de domínio e as camadas externas. Ela geralmente contém serviços de aplicação que encapsulam a lógica de aplicação específica e coordenam a execução das operações do domínio.
		- Camada de infraestrutura (infrastructure layer): é a camada externa responsável pela interação com o ambiente externo, como bancos de dados, sistemas de arquivos, serviços web etc. Ela inclui adaptadores e implementações concretas para lidar com detalhes de infraestrutura. É importante notar que as camadas internas não conhecem detalhes específicos da infraestrutura, pois essa comunicação é feita através de interfaces definidas na camada de domínio.

	Essa arquitetura promove a separação clara de preocupações, tornando o código mais fácil de entender, manter e testar. Além disso, ao inverter as dependências, ela torna o código mais flexível e adaptável a mudanças, uma vez que as camadas internas não dependem das camadas externas, o que facilita a substituição ou a alteração de detalhes de implementação sem afetar o núcleo da aplicação.

- Clean architecture
	Proposta por Robert C. Martin, também conhecido como "Uncle Bob", a clean architecture (literalmente arquitetura limpa em inglês) visa criar sistemas que sejam independentes de frameworks, UIs e bancos de dados. Ela define uma arquitetura em camadas, com o núcleo da aplicação contendo as regras de negócio mais importantes e as camadas externas contendo detalhes de implementação.

Seus princípios fundamentais:
		- Independência de frameworks: o código-fonte não deve depender de nenhum framework específico. Os frameworks são ferramentas externas e voláteis que podem mudar com o tempo, então a arquitetura deve ser projetada de forma a isolar o código da aplicação dessas mudanças.
		- Independência de interface do usuário: a lógica de negócios da aplicação não deve ser diretamente ligada à interface do usuário (UI). Isso permite que diferentes interfaces de usuário (como interfaces web, APIs REST, interfaces de linha de comando etc.) sejam facilmente conectadas à mesma lógica de negócios.
		- Independência de banco de dados: assim como a UI, o código de acesso a dados não deve ser diretamente acoplado à lógica de negócios. Isso permite que diferentes sistemas de armazenamento de dados (como bancos de dados SQL, NoSQL, serviços de armazenamento em nuvem etc.) sejam facilmente substituídos ou alterados sem afetar a lógica de negócios.
		- Independência de políticas (ou agentes externos): a regra de negócios deve ser independente de detalhes de implementação, como políticas de persistência, políticas de UI, políticas de segurança etc. Isso permite que diferentes políticas sejam facilmente alternadas ou modificadas sem alterar o núcleo da aplicação.

	Com base nesses princípios, a clean architecture organiza o código em camadas concêntricas, em que o núcleo da aplicação (conhecido como "entidades de negócio" ou "domínio") é cercado por camadas que contêm detalhes de implementação, como interfaces com o usuário, acesso a dados etc. As camadas são organizadas em um formato de anéis concêntricos, com o núcleo da aplicação no centro e as camadas externas ao redor.

As camadas típicas em uma clean architecture incluem:
		- Entidades de negócio (entities): é a camada mais interna e contém as entidades de domínio ou objetos de negócio que representam conceitos do domínio da aplicação. As entidades de negócio encapsulam o estado e o comportamento da aplicação e são independentes de qualquer detalhe de implementação.
		-Casos de uso (use cases ou interactors): esta camada contém os casos de uso da aplicação, ou seja, serviços e operações que a aplicação oferece aos usuários. Os casos de uso orquestram a execução das operações de negócio, utilizando as entidades de domínio e coordenando a interação com as camadas externas.
		- Controladores, presenters e gateways: são as camadas externas responsáveis por traduzir as entradas e saídas da interface do usuário para os casos de uso da aplicação e vice-versa. Eles adaptam os dados e os eventos entre a UI e os casos de uso, garantindo a separação de responsabilidades e a independência entre essas camadas.
		- Interfaces do usuário (UI), frameworks e drivers: esta camada contém as interfaces com o usuário, como interfaces web, APIs REST, interfaces de linha de comando etc. Ela é responsável por receber as solicitações do usuário, apresentar informações e coletar entradas, mas não contém lógica de negócios. Esta camada também contém os detalhes de implementação específicos, como frameworks, bibliotecas e drivers. Ela inclui código para lidar com detalhes de infraestrutura, como acesso a dados, comunicação de rede etc. Esses detalhes são encapsulados e isolados das camadas internas da aplicação.

	É importante ressaltar que a clean architecture não é prescritiva em termos de tecnologias específicas ou estruturas de diretórios. Ela fornece diretrizes gerais e princípios arquiteturais que podem ser aplicados de várias maneiras, dependendo das necessidades e requisitos específicos do projeto.