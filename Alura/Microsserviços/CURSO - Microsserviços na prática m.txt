			CURSO - Microsserviços na prática: mensageria com RabbitMQ

Módulo 1 (Requisições assíncronas):
	- Preparando o ambiente:
		- O RabbitMQ atua em duas partes:
			- Servidor: recebe as mensagens, processa-las, encaminha-las para as filas.
			- Cliente: a parte que é usada na aplicação, usada para fazer a publicação e o consumo das mensagens
		- Entrar na página oficial do RabbitMQ -> Get Started -> Download + Installation -> Escolher o modo de instalação (Vamos priorizar ou docker ou Linux)
		- Acessar "localhost:15672" -> Caso não tenha configurado variáveis de ambiente (Username e password = guest)
		- Comando:
			-> docker run -it -d --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:4-management

Módulo 2 (Padrão Pub/Sub)
	- Configurando o projeto:
		- Incluir a dependência no pom.xml ->
			-> <dependency>
		      	   	<groupId>org.springframework.boot</groupId>
			     	<artifactId>spring-boot-starter-amqp</artifactId>
			   </dependency>
			   <dependency>
			      	<groupId>org.springframework.amqp</groupId>
      				<artifactId>spring-rabbit-test</artifactId>
      				<scope>test</scope>
    			   </dependency>
		-> Ir no arquivo 'application.yml' e adicionar as seguintes configurações ->
			-> spring:
			    rabbitmq:
			     host: "localhost"
			     port: 5672
			     username: "admin"
			     password: "secret"
		-> Ir no microsserviço (package) que desejamos implementar o rabbitmq -> Criar um novo package chamado 'amqp' -> Criar uma classe '*AMQPConfiguration' ->
			-> Anotar a classe com o @Configuration
			-> Criar uma nova Queue (fila) -> 'public Queue criarFila(){ return new Queue('nome da fila', false); }'
				-> Com a anotação @Bean no método
				-> Primeiro parâmetro se referencia ao nome da fila
				-> Segundo parâmetro (opcional) se referencia à se a fila é durável ou não
			-> Para fazer operações administrativas, precisamos de um método que retorne um "RabbitAdmin" -> 'public RabbitAdmin criarRabbitAdmin(ConnectionFactory factory) { return new RabbitAdmin(factory); }'
				-> Método com a anotação @Bean
			-> Precisamos de uma forma de inicializar o Rabbit quando subirmos a aplicação -> Vamos usar uma interface chamada "ApplicationListener" -> 'public ApplicationListener<ApplicationReadyEvent> inicializarRabbitAdmin(RabbitAdmin admin){ return event -> admin.initialize(); }
				-> Método com a anotação @Bean